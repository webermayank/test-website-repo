name: Sync Translation Changes

on:
  push:
    branches: [main]
    paths:
      - 'translations/**'
  pull_request:
    branches: [main]
    paths:
      - 'translations/**'

jobs:
  sync-translations:
    runs-on: ubuntu-latest

    steps:
      # Checkout the website repo
      - name: Checkout website repo
        uses: actions/checkout@v4.2.2

      # Checkout the main repo
      - name: Checkout main repo
        uses: actions/checkout@v4.2.2
        with:
          repository: webermayank/test-main-repo
          path: test-main-repo

      # Detect changed files
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46.0.1
        with:
          files: |
            translations/**

      # Create issue in website repo if files changed
      - name: Create issue in website repo
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changedFiles = "${{ steps.changed-files.outputs.all_changed_files }}";
            await github.rest.issues.create({
              owner: "webermayank",
              repo: "test-website-repo",
              title: "Translation Update in Website Repo - Review Needed",
              body: `The following translation files were updated in the **test-website-repo**:\n\n- ${changedFiles.split(' ').join('\n- ')}\n\nPlease review the changes to ensure accuracy and consistency.`
            });

      # Check translation completion and remove labels
      - name: Check translation completion and remove labels
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changedFiles = "${{ steps.changed-files.outputs.all_changed_files }}".split(' ');
            const languages = changedFiles.map(file => file.split('/')[1]).filter((v, i, a) => a.indexOf(v) === i);

            // Get all open issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            for (const issue of issues.data) {
              // Check if issue is a translation issue
              if (!issue.title.includes('Documentation Change in Main Repo - Translation Needed')) continue;

              // Parse issue body to get changed files and lines
              const bodyLines = issue.body.split('\n');
              const changedFilesInIssue = [];
              for (const line of bodyLines) {
                const match = line.match(/- (.+?) \(lines (\d+)-(\d+)\)/);
                if (match) {
                  changedFilesInIssue.push({
                    file: match[1],
                    startLine: parseInt(match[2]),
                    endLine: parseInt(match[3])
                  });
                }
              }

              // Check each language
              for (const lang of languages) {
                const label = `translation:${lang}`;
                if (!issue.labels.some(l => l.name === label)) continue; // Label already removed

                let allTranslated = true;
                for (const change of changedFilesInIssue) {
                  const sourceFile = `test-main-repo/${change.file}`;
                  const translationFile = `translations/${lang}/${lang}.md`;

                  if (!fs.existsSync(sourceFile) || !fs.existsSync(translationFile)) {
                    allTranslated = false;
                    break;
                  }

                  const sourceContent = fs.readFileSync(sourceFile, 'utf8').split('\n');
                  const translationContent = fs.readFileSync(translationFile, 'utf8').split('\n');
                  const sourceLines = sourceContent.slice(change.startLine - 1, change.endLine);

                  // Check if all source lines are present in translation file
                  for (const line of sourceLines) {
                    if (line.trim() && !translationContent.some(t => t.trim() && t.includes(line))) {
                      allTranslated = false;
                      break;
                    }
                  }
                }

                // If all lines are translated, remove the label
                if (allTranslated) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    name: label
                  });
                  console.log(`Removed label ${label} from issue #${issue.number}`);
                }
              }
            }